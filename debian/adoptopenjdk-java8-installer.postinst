#!/bin/bash

set -e

fp_exit_with_error() {
	echo "AdoptOpenJDK JDK 8 is NOT installed: $@"
	exit 1
}

DPKG_ARCH=$(dpkg --print-architecture)

case ${DPKG_ARCH} in
  'amd64')
    J_DIR_INSIDE_TAR_GZ=jdk8u192-b12
    FILENAME_TAR_GZ=OpenJDK8U-jdk_x64_linux_hotspot_8u192b12.tar.gz
    DOWNLOAD_TAR_GZ_URL=https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u192-b12/OpenJDK8U-jdk_x64_linux_hotspot_8u192b12.tar.gz
    SHA256SUM_TGZ="19c91906c220c8eac38179fb661a810c451779a65b8be530c1d98e15b6bb2673"
  ;;
  'arm64')
    echo "Hello aarch64!"
    exit 2
	;;
  *)
    echo "Unsupported architecture."
    echo "dpkg arch: $DPKG_ARCH"
    echo "uname arch: $(uname -m)"
    exit 1
esac


PRIORITY=1081 # The priority for the alternatives.
J_ID=java-8-adoptopenjdk
J_INSTALL_DIR=/usr/lib/jvm/${J_ID}
INSTALLER_DIR=/var/cache/adoptopenjdk-jdk8-installer
JINFO_MANIFEST_FILE=/usr/lib/jvm/.${J_ID}.jinfo

########Create dirs
mkdir -p ${INSTALLER_DIR}
mkdir -p /usr/lib/jvm
#############


# Download and unpack, either from existing local file or download.
cd ${INSTALLER_DIR}

if [[ -d "${INSTALLER_DIR}" && -f "${INSTALLER_DIR}/$FILENAME_TAR_GZ" ]]; then
  echo "Installing from local file ${INSTALLER_DIR}/$FILENAME_TAR_GZ"
  cp -f -p "${INSTALLER_DIR}/${FILENAME_TAR_GZ}" ${FILENAME_TAR_GZ}_TEMP
  mv -f ${FILENAME_TAR_GZ}_TEMP ${FILENAME_TAR_GZ}
else
  # no local file
  echo "No local file detected, will download."

  # use apt proxy if configured.
  APT_PROXIES=$(apt-config shell \
  http_proxy Acquire::http::Proxy \
  https_proxy Acquire::https::Proxy \
  ftp_proxy Acquire::ftp::Proxy \
  dl_direct Acquire::http::Proxy::github.com \
  dl_direct Acquire::http::Proxy::amazons3.com \
  )

  if [[ -n "$APT_PROXIES" ]]; then
    eval export $APT_PROXIES
  fi

  if [[ "$dl_direct" = "DIRECT" ]]; then
      unset http_proxy
      unset https_proxy
      unset ftp_proxy
  fi

  # if $INSTALLER_DIR/wgetrc exists, use it for downloading.
  # This allows for very specific edge cases to work.
  if [[ -f ${INSTALLER_DIR}/wgetrc ]]; then
    echo "Using wget settings from $INSTALLER_DIR/wgetrc"
  else
    # setting wget options
    :> wgetrc
    echo "noclobber = off" >> wgetrc
    echo "dir_prefix = ." >> wgetrc
    echo "dirstruct = off" >> wgetrc
    echo "verbose = on" >> wgetrc
    echo "progress = dot:mega" >> wgetrc
    echo "tries = 5" >> wgetrc

    echo "No $INSTALLER_DIR/wgetrc file found."
    echo "Creating $INSTALLER_DIR/wgetrc with default values."
  fi

  # Now actually download the .tar.gz file.
  echo "Downloading AdoptOpenJDK Java 8..."
  WGETRC=wgetrc wget --continue -O ${FILENAME_TAR_GZ} ${DOWNLOAD_TAR_GZ_URL} || fp_exit_with_error "download failed"
  echo "Download done."
fi

# verify SHA256 checksum of (copied or downloaded) tarball
echo "$SHA256SUM_TGZ  $FILENAME_TAR_GZ" | sha256sum -c > /dev/null 2>&1 || fp_exit_with_error "sha256sum mismatch $FILENAME_TAR_GZ"

# unpacking
tar xzf ${FILENAME_TAR_GZ} || fp_exit_with_error "cannot unpack jdk8"

# Copy JDK to the right dir
mv ${J_DIR_INSIDE_TAR_GZ} ${J_ID}
rm -rf ${J_INSTALL_DIR}
cp -rf ${J_ID} /usr/lib/jvm/

# Clean up
rm -rf ${J_ID}

echo "Removing outdated downloads..."
find ${INSTALLER_DIR} -maxdepth 1 -name '*.tar.gz' ! -name ${FILENAME_TAR_GZ} -type f -print

# Gzips the man pages.
gzip -9 ${J_INSTALL_DIR}/man/man1/*.1

# create .jinfo file header, for update-java-alternatives.
cat << EOD > ${JINFO_MANIFEST_FILE}
name=${J_ID}
alias=${J_ID}
priority=${PRIORITY}
section=java
EOD

# Here we start from the binaries, and look for the man pages.
# create alternatives for the jre binaries.
# also add them to the .jinfo manifest for easy switching.
for f in ${J_INSTALL_DIR}/jre/bin/*; do
    name=`basename ${f}`;
    if [[ ! -f "/usr/bin/$name" || -L "/usr/bin/$name" ]]; then
        if [[ -f "$J_INSTALL_DIR/man/man1/$name.1.gz" ]]; then
           # man page available, install as a slave of the tool
           update-alternatives --install /usr/bin/${name} ${name} ${J_INSTALL_DIR}/jre/bin/${name} ${PRIORITY} --slave /usr/share/man/man1/${name}.1.gz ${name}.1.gz ${J_INSTALL_DIR}/man/man1/${name}.1.gz
           echo "jre $name $J_INSTALL_DIR/jre/bin/$name" >> ${JINFO_MANIFEST_FILE}
        else
           # no man page available for this specific tool
           update-alternatives --install /usr/bin/${name} ${name} ${J_INSTALL_DIR}/jre/bin/${name} ${PRIORITY}
           echo "jre $name $J_INSTALL_DIR/jre/bin/$name" >> ${JINFO_MANIFEST_FILE}
        fi
    fi
done

# For the non-JRE tools, we actually start from the man pages.
for f in ${J_INSTALL_DIR}/man/man1/*; do
  name=`basename $f .1.gz`;
  if [[ ! -f "/usr/bin/$name" || -L "/usr/bin/$name" ]]; then
    if [[ ! -e ${J_INSTALL_DIR}/jre/bin/${name} ]]; then #don't link already linked JRE files
      update-alternatives --install /usr/bin/${name} ${name} ${J_INSTALL_DIR}/bin/${name} ${PRIORITY} --slave /usr/share/man/man1/${name}.1.gz ${name}.1.gz ${J_INSTALL_DIR}/man/man1/${name}.1.gz
      echo "jdk $name $J_INSTALL_DIR/bin/$name" >> ${JINFO_MANIFEST_FILE}
    fi
  fi
done

# Place security config files in /etc so they are not overwritten on upgrade.
# @TODO: pardini: I am not sure this is a good idea; new JDK versions can bring updated files?

mkdir -p /etc/${J_ID}/security
for configfile in blacklist blacklisted.certs java.policy java.security trusted.libraries
do
	if [ ! -e /etc/${J_ID}/security/${configfile} ] && [ -e $J_INSTALL_DIR/jre/lib/security/${configfile} ]; then
		mv ${J_INSTALL_DIR}/jre/lib/security/${configfile} /etc/${J_ID}/security/
	else
		rm -f ${J_INSTALL_DIR}/jre/lib/security/${configfile}
	fi
done

for configfile in blacklist blacklisted.certs java.policy java.security trusted.libraries
do
	if [ ! -e ${J_INSTALL_DIR}/jre/lib/security/${configfile} ] && [ -e /etc/${J_ID}/security/${configfile} ]; then
		ln -s /etc/${J_ID}/security/${configfile} ${J_INSTALL_DIR}/jre/lib/security/
	fi
done

echo "AdoptOpenJDK JDK 8 installed"
echo ""
echo "##### Important ########"
echo "To set AdoptOpenJDK JDK8 as default, install the \"adoptopenjdk-java8-set-default\" package."
echo "E.g.: sudo apt install adoptopenjdk-java8-set-default"
echo "########################"
echo ""

#DEBHELPER#

exit 0
